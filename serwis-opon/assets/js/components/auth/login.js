/**
 * Komponent logowania
 * 
 * Wy≈õwietla formularz logowania i obs≈Çuguje uwierzytelnianie u≈ºytkownika
 */
const Login = () => {
  // Stan formularza logowania
  const [username, setUsername] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [error, setError] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  
  // Obs≈Çuga zmiany username
  const handleUsernameChange = (e) => {
    setUsername(e.target.value);
    if (error) setError(''); // Czy≈õƒá b≈ÇƒÖd przy zmianie
  };
  
  // Obs≈Çuga zmiany has≈Ça
  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
    if (error) setError(''); // Czy≈õƒá b≈ÇƒÖd przy zmianie
  };
  
  // Obs≈Çuga wys≈Çania formularza
  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Sprawd≈∫, czy pola sƒÖ wype≈Çnione
    if (!username.trim() || !password.trim()) {
      setError('Wprowad≈∫ nazwƒô u≈ºytkownika i has≈Ço');
      return;
    }
    
    // Rozpocznij proces logowania
    setIsLoading(true);
    setError('');
    
    // W rzeczywistej aplikacji tutaj by≈Çoby wywo≈Çanie API
    // U≈ºyjemy prostego op√≥≈∫nienia, aby zasymulowaƒá ≈ºƒÖdanie API
    setTimeout(() => {
      // Dla demonstracji - tylko admin/admin123 jest poprawny
      if (username === 'admin' && password === 'admin123') {
        // Zapisz informacje o zalogowanym u≈ºytkowniku (w rzeczywistej aplikacji - token JWT)
        localStorage.setItem('isAuthenticated', 'true');
        localStorage.setItem('user', JSON.stringify({
          id: 1,
          username: 'admin',
          name: 'Adam Nowak',
          role: 'admin'
        }));
        
        // Przekieruj do strony g≈Ç√≥wnej
        window.location.hash = '#/';
      } else {
        // Poka≈º b≈ÇƒÖd logowania
        setError('Nieprawid≈Çowa nazwa u≈ºytkownika lub has≈Ço');
        setIsLoading(false);
      }
    }, 1000);
  };
  
  return React.createElement('div', { className: 'login-container' },
    React.createElement('div', { className: 'login-form' },
      // Logo
      React.createElement('div', { className: 'login-logo' }, 'üõû'),
      
      // Tytu≈Ç
      React.createElement('h1', { className: 'login-title' }, 'Serwis Opon'),
      
      // Komunikat b≈Çƒôdu
      error && React.createElement('div', { className: 'login-error' }, error),
      
      // Formularz logowania
      React.createElement('form', { onSubmit: handleSubmit },
        // Nazwa u≈ºytkownika
        React.createElement('div', { className: 'form-group' },
          React.createElement('label', { htmlFor: 'username' }, 'Nazwa u≈ºytkownika'),
          React.createElement('input', {
            type: 'text',
            id: 'username',
            className: 'form-control',
            value: username,
            onChange: handleUsernameChange,
            disabled: isLoading,
            autoFocus: true,
            required: true
          })
        ),
        
        // Has≈Ço
        React.createElement('div', { className: 'form-group' },
          React.createElement('label', { htmlFor: 'password' }, 'Has≈Ço'),
          React.createElement('input', {
            type: 'password',
            id: 'password',
            className: 'form-control',
            value: password,
            onChange: handlePasswordChange,
            disabled: isLoading,
            required: true
          })
        ),
        
        // Przycisk logowania
        React.createElement('button', {
          type: 'submit',
          className: 'login-button',
          disabled: isLoading
        }, isLoading ? 'Logowanie...' : 'Zaloguj siƒô')
      ),
      
      // Pomoc i informacje
      React.createElement('div', { className: 'login-help', style: { marginTop: '20px', textAlign: 'center' } },
        React.createElement('p', null, 'U≈ºyj danych testowych:'),
        React.createElement('p', { style: { fontWeight: 'bold' } }, 'Login: admin, Has≈Ço: admin123')
      )
    )
  );
};